services:
    # GENERAL
    event_engine.cache:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter

    event_engine.connection:
        public: true
        class: ADS\Bundle\EventEngineBundle\Persistency\PDO
        arguments:
            $dsn: '%event_engine.pdo_dsn%'

    # PROPERTY INFO
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDefaultExtractor: ~
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyRequiredExtractor: ~
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDeprecationExtractor:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDocBlockExtractor'
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDocBlockExtractor: ~
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyExampleExtractor:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDocBlockExtractor'
    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyTypeExtractorForValueObjects:
        tags:
            - 'property_info.type_extractor'

    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDescriptionExtractor:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyDocBlockExtractor'
        tags:
            - 'property_info.description_extractor'

    ADS\Bundle\EventEngineBundle\PropertyInfo\PropertyAccessExtractor:
        tags:
            - 'property_info.access_extractor'

    # CACHE
    event_engine.cache.config:
        class: 'Symfony\Component\Cache\Adapter\ChainAdapter'
        arguments:
            - [ 'cache.adapter.array', 'cache.adapter.apcu', 'cache.adapter.filesystem' ]
        public: false
        tags:
            - { name: cache.pool }

    # SCHEMA
    EventEngine\Schema\Schema: '@EventEngine\JsonSchema\OpisJsonSchema'
    EventEngine\JsonSchema\OpisJsonSchema: ~

    # EVENT ENGINE
    ADS\Bundle\EventEngineBundle\EventEngineFactory:
        arguments:
            $schema: '@EventEngine\Schema\Schema'
            $flavour: '@EventEngine\Runtime\Flavour'
            $multiModelStore: '@EventEngine\Persistence\MultiModelStore'
            $simpleMessageEngine: '@EventEngine\Logger\LogEngine'
            $container: '@service_container'
            $eventQueue: '@?event_engine.event_queue'
            $cache: '@event_engine.cache.config'
            $controllerExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\ControllerExtractor'
            $aggregateCommandExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\AggregateCommandExtractor'
            $resolverExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\ResolverExtractor'
            $responseExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\ResponseExtractor'
            $stateClassExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\StateClassExtractor'
            $eventClassExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\EventClassExtractor'
            $projectorExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\ProjectorExtractor'
            $classMapper: '@ADS\Bundle\EventEngineBundle\Classes\ClassMapper'
            $commands: '%event_engine.commands%'
            $controllerCommands: '%event_engine.controller_commands%'
            $aggregateCommands: '%event_engine.aggregate_commands%'
            $queries: '%event_engine.queries%'
            $events: '%event_engine.events%'
            $aggregates: '%event_engine.aggregates%'
            $projectors: '%event_engine.projectors%'
            $types: '%event_engine.types%'
            $descriptions: '%event_engine.descriptions%'
            $listeners: '%event_engine.listeners%'
            $environment: '%kernel.environment%'
            $debug: '%kernel.debug%'

    EventEngine\EventEngine:
        factory: '@ADS\Bundle\EventEngineBundle\EventEngineFactory'

    ADS\Bundle\EventEngineBundle\Classes\ClassMapper:
        arguments:
            $eventClassExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\EventClassExtractor'
            $preProcessorExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\PreProcessorExtractor'
            $commandExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\CommandExtractor'
            $aggregateCommandExtractor: '@ADS\Bundle\EventEngineBundle\MetadataExtractor\AggregateCommandExtractor'
            $commands: '%event_engine.commands%'
            $aggregateCommands: '%event_engine.aggregate_commands%'
            $aggregates: '%event_engine.aggregates%'
            $preProcessors: '%event_engine.pre_processors%'


    metadataExtractors:
        namespace: ADS\Bundle\EventEngineBundle\MetadataExtractor\
        resource: '../../MetadataExtractor/*Extractor.php'
        arguments:
            $metadataExtractor: '@TeamBlue\Util\MetadataExtractor\MetadataExtractor'

    ADS\Bundle\EventEngineBundle\Messenger\MessengerMessageProducer:
        public: true
        arguments:
            - '@command'
            - '@event'
            - '@query'
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
            - '@EventEngine\EventEngine'

    # STORES
    ADS\Bundle\EventEngineBundle\Store\SensitiveEncryptedProophEventStore:
        autowire: true

    # FLAVOURS
    EventEngine\Runtime\PrototypingFlavour:
        arguments:
            - '@EventEngine\Runtime\Prototyping\Port'
    EventEngine\Runtime\FunctionalFlavour:
        arguments:
            - '@EventEngine\Runtime\Functional\Port'
    ADS\Bundle\EventEngineBundle\Flavour\FunctionalMetaDataFlavour:
        arguments:
            - '@EventEngine\Runtime\FunctionalFlavour'
    EventEngine\Runtime\OopFlavour:
        arguments:
            - '@EventEngine\Runtime\Oop\Port'
            - '@EventEngine\Runtime\FunctionalFlavour'
    ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour:
        arguments:
            - '@EventEngine\Runtime\OopFlavour'
            - '@ADS\Bundle\EventEngineBundle\Flavour\FunctionalMetaDataFlavour'

    # COMMANDS
    event_engine.command.database_clear:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineDatabaseClearCommand
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '@EventEngine\DocumentStore\DocumentStore'
            - '%event_engine.aggregates%'
            - '%env(string:APP_ENV)%'
        tags:
            - console.command

    event_engine.command.database_seed:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineDatabaseSeedCommand
        arguments:
            - '@EventEngine\Runtime\Flavour'
            - '@EventEngine\Persistence\MultiModelStore'
            - '@EventEngine\DocumentStore\DocumentStore'
            - '%env(string:APP_ENV)%'
            - '%kernel.project_dir%'
            - '%event_engine.seed_path%'
        tags:
            - console.command

    event_engine.command.document_stores_create:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineDocumentStoresCreateCommand
        arguments:
            - '@EventEngine\DocumentStore\DocumentStore'
            - '%event_engine.aggregates%'
        tags:
            - console.command

    event_engine.command.projections_create:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\EventEngineProjectionsCreateCommand
        arguments:
            - '@event_engine.connection'
        tags:
            - console.command

    event_engine.command.streams_create:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineEventStreamsCreateCommand
        arguments:
            - '@event_engine.connection'
            - '@Prooph\EventStore\EventStore'
            - '%event_engine.aggregates%'
        tags:
            - console.command

    event_engine.command.projectors_reset:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\ResetProjections
        arguments:
            - '@Prooph\EventStore\Projection\ProjectionManager'
        tags:
            - console.command

    event_engine.command.projectors_run:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\RunProjections
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Projector\WriteModelStreamProjection'
        tags:
            - console.command

    # INTERFACES
    Prooph\Common\Event\ActionEventEmitter: '@Prooph\Common\Event\ProophActionEventEmitter'
    Prooph\EventStore\EventStore: '@Prooph\EventStore\TransactionalActionEventEmitterEventStore'
    Prooph\EventStore\Pdo\PersistenceStrategy\PostgresPersistenceStrategy: '@ADS\Bundle\EventEngineBundle\Persistency\SingleStreamStrategy'
    Prooph\EventStore\TransactionalEventStore: '@Prooph\EventStore\Pdo\PostgresEventStore'

    EventEngine\DocumentStore\DocumentStore: '@EventEngine\DocumentStore\Postgres\PostgresDocumentStore'
    EventEngine\EventStore\EventStore: '@EventEngine\Prooph\V7\EventStore\ProophEventStore'
    EventEngine\Logger\LogEngine: '@EventEngine\Logger\SimpleMessageEngine'
    EventEngine\Persistence\MultiModelStore: '@EventEngine\Persistence\ComposedMultiModelStore'
    EventEngine\Persistence\TransactionalConnection: '@ADS\Bundle\EventEngineBundle\Persistency\TransactionalConnection'
    EventEngine\Runtime\Flavour: '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
    EventEngine\Runtime\Prototyping\Port: '@ADS\Bundle\EventEngineBundle\Port\MessagePort'
    EventEngine\Runtime\Functional\Port: '@ADS\Bundle\EventEngineBundle\Port\MessagePort'
    EventEngine\Runtime\Oop\Port: '@ADS\Bundle\EventEngineBundle\Port\EventSourceAggregatePort'
    EventEngine\Messaging\MessageDispatcher: '@ADS\Bundle\EventEngineBundle\Messenger\MessengerMessageProducer'
    EventEngine\Messaging\MessageProducer: '@ADS\Bundle\EventEngineBundle\Messenger\MessengerMessageProducer'

    # IMPLEMENTATIONS
    Opis\JsonSchema\Validator: ~
    Prooph\EventStore\Pdo\WriteLockStrategy\PostgresAdvisoryLockStrategy:
        arguments:
            - '@event_engine.connection'
    Prooph\EventStore\TransactionalActionEventEmitterEventStore:
        arguments:
            - '@Prooph\EventStore\TransactionalEventStore'
            - '@Prooph\Common\Event\ActionEventEmitter'
    Prooph\EventStore\Pdo\PostgresEventStore:
        arguments:
            - '@EventEngine\Prooph\V7\EventStore\ProophEventStoreMessageFactory'
            - '@event_engine.connection'
            - '@Prooph\EventStore\Pdo\PersistenceStrategy\PostgresPersistenceStrategy'
            - 10000
            - 'event_streams'
            - false
            - '@Prooph\EventStore\Pdo\WriteLockStrategy\PostgresAdvisoryLockStrategy'
    Prooph\Common\Event\ProophActionEventEmitter:
        arguments:
            - !php/const Prooph\EventStore\TransactionalActionEventEmitterEventStore::ALL_EVENTS

    EventEngine\DocumentStore\Postgres\PostgresDocumentStore:
        arguments:
            - '@event_engine.connection'
            - '%event_engine.document_store.prefix%'
            - '%event_engine.document_store.id.schema%'
            - '%event_engine.document_store.transactional%'


    EventEngine\Logger\SimpleMessageEngine:
        arguments:
            - '@logger'
    EventEngine\Persistence\ComposedMultiModelStore:
        arguments:
            - '@EventEngine\Persistence\TransactionalConnection'
            - '@EventEngine\EventStore\EventStore'
            - '@EventEngine\DocumentStore\DocumentStore'
    EventEngine\Prooph\V7\EventStore\ProophEventStore:
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '%event_engine.event_store.transactional%'
    EventEngine\Prooph\V7\EventStore\ProophEventStoreMessageFactory: ~


    ADS\Bundle\EventEngineBundle\Aggregate\AggregateRoot: ~
    ADS\Bundle\EventEngineBundle\Aggregate\DeletableAggregate: ~
    ADS\Bundle\EventEngineBundle\Aggregate\EventSourced: ~

    ADS\Bundle\EventEngineBundle\Config:
        arguments:
            - '@EventEngine\EventEngine'
            - '@event_engine.cache'
            - '%kernel.environment%'
        tags:
            - { name: kernel.cache_clearer }

    ADS\Bundle\EventEngineBundle\Persistency\SingleStreamStrategy: ~
    ADS\Bundle\EventEngineBundle\Persistency\TransactionalConnection:
        arguments:
            - '@event_engine.connection'
    ADS\Bundle\EventEngineBundle\Port\EventSourceAggregatePort:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\AggregateCommandExtractor'
    ADS\Bundle\EventEngineBundle\Port\MessagePort:
        arguments:
            - '@Opis\JsonSchema\Validator'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\AggregateCommandExtractor'
            - '@Chrisguitarguy\RequestId\RequestIdStorage'
    ADS\Bundle\EventEngineBundle\Repository\Repository: ~
    ADS\Bundle\EventEngineBundle\Util\EventEngineUtil: ~
    ADS\Bundle\EventEngineBundle\Exception\Handler:
        tags:
            - 'kernel.event_subscriber'

    Prooph\EventStore\Projection\ProjectionManager:
        class: Prooph\EventStore\Pdo\Projection\PostgresProjectionManager
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '@event_engine.connection'

    ADS\Bundle\EventEngineBundle\Projector\WriteModelStreamProjection:
        arguments:
            - '@Prooph\EventStore\Projection\ProjectionManager'
            - '@EventEngine\EventEngine'
    ADS\Bundle\EventEngineBundle\Projector\ReadModelProxy:
        arguments:
            - '@EventEngine\EventEngine'

    ADS\Bundle\EventEngineBundle\Validator\Validator:
        decorates: 'validator'
        arguments:
            - '@.inner'

    ADS\Bundle\EventEngineBundle\Lock\StoreFactory: ~
    lock.postgres.store:
        class: Symfony\Component\Lock\Store\PostgreSqlStore
        factory: '@ADS\Bundle\EventEngineBundle\Lock\StoreFactory'
        arguments:
            - '%event_engine.pdo_dsn%'

    lock.aggregate.factory:
        class: Symfony\Component\Lock\LockFactory
        arguments:
            - '@lock.postgres.store'

    ADS\Bundle\EventEngineBundle\Messenger\Handler\MessageHandler:
        autoconfigure: true
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
            - '@ADS\Bundle\EventEngineBundle\Lock\LockAggregate'
            - '@ADS\Bundle\EventEngineBundle\Lock\NoLockAggregate'

    ADS\Bundle\EventEngineBundle\Messenger\Service\MessageFromEnvelope:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'

    ADS\Bundle\EventEngineBundle\Messenger\Retry\CommandRetry:
        parent: ADS\Bundle\EventEngineBundle\Messenger\Retry\Retry
    ADS\Bundle\EventEngineBundle\Messenger\Retry\EventRetry:
        parent: ADS\Bundle\EventEngineBundle\Messenger\Retry\Retry
    ADS\Bundle\EventEngineBundle\Messenger\Retry\QueryRetry:
        parent: ADS\Bundle\EventEngineBundle\Messenger\Retry\Retry
    ADS\Bundle\EventEngineBundle\Messenger\Retry\Retry:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Messenger\Service\MessageFromEnvelope'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\QueueableExtractor'

    ADS\Bundle\EventEngineBundle\Messenger\Middleware\DontSendToFailureTransportMiddleware:
        public: true
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Messenger\Retry\CommandRetry'
            - '@ADS\Bundle\EventEngineBundle\Messenger\Retry\EventRetry'
            - '@ADS\Bundle\EventEngineBundle\Messenger\Retry\QueryRetry'
            - '@ADS\Bundle\EventEngineBundle\Messenger\Service\MessageFromEnvelope'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\QueueableExtractor'

    ADS\Bundle\EventEngineBundle\Messenger\Middleware\PickTransportMiddleware:
        public: true
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\QueueableExtractor'

    ADS\Bundle\EventEngineBundle\Lock\LockAggregate:
        arguments:
            - '@EventEngine\EventEngine'
            - '@lock.aggregate.factory'
            - '@logger'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\AggregateCommandExtractor'
            - '@ADS\Bundle\EventEngineBundle\MetadataExtractor\QueueableExtractor'

    ADS\Bundle\EventEngineBundle\Lock\NoLockAggregate:
        arguments:
            - '@EventEngine\EventEngine'

    ADS\Bundle\EventEngineBundle\Validator\SpecificationValidator:
        tags:
            - validator.constraint_validator
        arguments:
            $container: '@service_container'

    ADS\Bundle\EventEngineBundle\Validator\ListenerWithValidatedMessage:
        abstract: true

    ADS\Bundle\EventEngineBundle\MessageDispatcher\FixedMessageUuidDispatcher:
        arguments:
            $messageDispatcher: '@EventEngine\Messaging\MessageDispatcher'
            $requestIdStorage: '@Chrisguitarguy\RequestId\RequestIdStorage'


